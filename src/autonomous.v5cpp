{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\n\n\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// User defined function\nvoid myblockfunction_move_right();\n// User defined function\nvoid myblockfunction_move_left();\n// User defined function\nvoid myblockfunction_move_backward();\n// User defined function\nvoid myblockfunction_move_forward();\n// User defined function\nvoid myblockfunction_turn_clockwise();\n// User defined function\nvoid myblockfunction_turn_counterclockwise();\n// User defined function\nvoid myblockfunction_stop();\n\nfloat myVariable;\n\n// User defined function\nvoid myblockfunction_move_right() {\n  Motor1.spin(forward);\n  Motor10.spin(reverse);\n  Motor11.spin(reverse);\n  Motor20.spin(forward);\n}\n\n// User defined function\nvoid myblockfunction_move_left() {\n  Motor1.spin(reverse);\n  Motor10.spin(forward);\n  Motor11.spin(forward);\n  Motor20.spin(reverse);\n}\n\n// User defined function\nvoid myblockfunction_move_backward() {\n  Motor1.spin(reverse);\n  Motor10.spin(reverse);\n  Motor11.spin(reverse);\n  Motor20.spin(reverse);\n}\n\n// User defined function\nvoid myblockfunction_move_forward() {\n  Motor1.spin(forward);\n  Motor10.spin(forward);\n  Motor11.spin(forward);\n  Motor20.spin(forward);\n}\n\n// User defined function\nvoid myblockfunction_turn_clockwise() {\n  Motor1.spin(reverse);\n  Motor10.spin(forward);\n  Motor11.spin(reverse);\n  Motor20.spin(forward);\n}\n\n// User defined function\nvoid myblockfunction_turn_counterclockwise() {\n  Motor1.spin(forward);\n  Motor10.spin(reverse);\n  Motor11.spin(forward);\n  Motor20.spin(reverse);\n}\n\n// User defined function\nvoid myblockfunction_stop() {\n  Motor1.stop();\n  Motor10.stop();\n  Motor11.stop();\n  Motor20.stop();\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  Controller1.rumble(\"-.-.\");\n  return 0;\n}\n\n// \"when Controller1 ButtonX pressed\" hat block\nvoid onevent_Controller1ButtonX_pressed_0() {\n  Brain.Timer.clear();\n  while (!(Brain.Timer.time(seconds) == 5.0)) {\n    myblockfunction_move_forward();\n  wait(5, msec);\n  }\n  while (!(Brain.Timer.time(seconds) == 5.5)) {\n    myblockfunction_turn_clockwise();\n  wait(5, msec);\n  }\n  while (!(Brain.Timer.time(seconds) == 7.0)) {\n    myblockfunction_move_forward();\n  wait(5, msec);\n  }\n  while (!(Brain.Timer.time(seconds) == 6.5)) {\n    myblockfunction_turn_counterclockwise();\n  wait(5, msec);\n  }\n  while (!(Brain.Timer.time(seconds) == 9.0)) {\n    myblockfunction_move_forward();\n  wait(5, msec);\n  }\n  while (!(Brain.Timer.time(seconds) == 9.5)) {\n    myblockfunction_turn_counterclockwise();\n  wait(5, msec);\n  }\n  while (!(Brain.Timer.time(seconds) == 10.0)) {\n    myblockfunction_move_forward();\n  wait(5, msec);\n  }\n  while (!(Brain.Timer.time(seconds) == 10.5)) {\n    myblockfunction_turn_clockwise();\n  wait(5, msec);\n  }\n  while (!(Brain.Timer.time(seconds) == 11.0)) {\n    myblockfunction_move_forward();\n  wait(5, msec);\n  }\n  while (!(Brain.Timer.time(seconds) == 11.5)) {\n    myblockfunction_turn_clockwise();\n  wait(5, msec);\n  }\n  while (!(Brain.Timer.time(seconds) == 15.0)) {\n    myblockfunction_move_forward();\n  wait(5, msec);\n  }\n}\n\n\nint main() {\n  // register event handlers\n  Controller1.ButtonX.pressed(onevent_Controller1ButtonX_pressed_0);\n\n  wait(15, msec);\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","textLanguage":"cpp","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}